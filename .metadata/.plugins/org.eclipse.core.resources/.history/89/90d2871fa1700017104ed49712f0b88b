package org.wso2.charon3.utils.ldapmanager;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.charon3.core.attributes.Attribute;
import org.wso2.charon3.core.attributes.ComplexAttribute;
import org.wso2.charon3.core.attributes.MultiValuedAttribute;
import org.wso2.charon3.core.attributes.SimpleAttribute;
import org.wso2.charon3.core.exceptions.BadRequestException;
import org.wso2.charon3.core.exceptions.CharonException;
import org.wso2.charon3.core.objects.User;
import org.wso2.charon3.core.schema.SCIMConstants.UserSchemaConstants;
import org.wso2.charon3.core.schema.SCIMDefinitions;

import com.novell.ldap.LDAPAttribute;
import com.novell.ldap.LDAPAttributeSet;
import com.novell.ldap.LDAPEntry;

/**
 * 
 * @author AkshathaKadri
 *
 */
public class LdapUtil {

	public static LDAPEntry copyUserToLdap0(User user) throws CharonException{
		System.out.println(user);
		LDAPAttributeSet attributeSet = new LDAPAttributeSet();
		attributeSet.add(new LDAPAttribute("uid",user.getId()));

		Map<String, Attribute> attributes = user.getAttributeList();
		Set<String> keys = attributes.keySet();
		for(String key:keys){
			attributeSet.add(new LDAPAttribute(key,attributes.get(key).toString()));
		}
		String dn = "cn="+user.getId()+",ou=users,o=people";
		LDAPEntry entry = new LDAPEntry(dn,attributeSet);
		//attributeSet.addAll((Collection) user.getAttributeList());
		//(LDAPAttributeSet) CopyUtil.deepCopy(map);   
		return entry;
	}
	public static User convertLdapToUser(LDAPEntry nextEntry) {
		return new User();
	}

	public static LDAPAttributeSet copyUserToLdap(User user) throws BadRequestException {
		LDAPAttributeSet attributeSet = new LDAPAttributeSet();
		attributeSet.add( new LDAPAttribute("objectclass", "inetOrgPerson")); 
		Map<String, Attribute> attributeList = user.getAttributeList();
		for (Attribute attribute : attributeList.values()) {
			if (attribute instanceof SimpleAttribute) {
				attributeSet = simpleAttributeToString(null, attributeSet, attribute);

			} else if (attribute instanceof ComplexAttribute) {
				ComplexAttribute complexAttribute = (ComplexAttribute) attribute;
				Map<String, Attribute> subAttributes = complexAttribute.getSubAttributesList();
				for (Attribute subAttribute : subAttributes.values()) {
					if (subAttribute instanceof SimpleAttribute) {
						attributeSet = simpleAttributeToString(null, attributeSet,
								(Attribute) ((SimpleAttribute) subAttribute));

					} else if (subAttribute instanceof MultiValuedAttribute) {
						if (!subAttribute.getType().equals(SCIMDefinitions.DataType.COMPLEX)) {
							attributeSet = multiValuedPrimitiveAttributeToString(
									((MultiValuedAttribute) subAttribute).getAttributePrimitiveValues(),
									subAttribute.getName(), attributeSet);
						} else {
							List<Attribute> subAttributeList  =
									((MultiValuedAttribute) (subAttribute)).getAttributeValues();

							for (Attribute subValue : subAttributeList) {

								ComplexAttribute complexSubAttribute = (ComplexAttribute) subValue;
								Map<String, Attribute> subSubAttributes = complexSubAttribute.getSubAttributesList();

								for (Attribute subSubAttribute : subSubAttributes.values()) {
									if (subSubAttribute instanceof SimpleAttribute) {

										attributeSet =  simpleAttributeToString(null, attributeSet,
												(Attribute) ((SimpleAttribute) subSubAttribute));

									} else if (subSubAttribute instanceof MultiValuedAttribute) {
										attributeSet = multiValuedPrimitiveAttributeToString(
												((MultiValuedAttribute) subSubAttribute).getAttributePrimitiveValues(),
												subSubAttribute.getName(),attributeSet);
									}
								}
							}
						}
					} else if (subAttribute instanceof ComplexAttribute) {
						ComplexAttribute complexSubAttribute = (ComplexAttribute) subAttribute;
						Map<String, Attribute> subSubAttributes = complexSubAttribute.getSubAttributesList();

						for (Attribute subSubAttribute : subSubAttributes.values()) {
							if (subSubAttribute instanceof SimpleAttribute) {
								attributeSet = simpleAttributeToString(null, attributeSet,
										(Attribute) ((SimpleAttribute) subSubAttribute));

							} else if (subSubAttribute instanceof MultiValuedAttribute) {
								attributeSet = multiValuedPrimitiveAttributeToString(
										((MultiValuedAttribute) subSubAttribute).getAttributePrimitiveValues(),
										subSubAttribute.getName(),attributeSet);
							}
						}
					}
				}
			} else if (attribute instanceof MultiValuedAttribute) {
				MultiValuedAttribute multiValuedAttribute = (MultiValuedAttribute) attribute;
				if (multiValuedAttribute.getType().equals(SCIMDefinitions.DataType.COMPLEX)) {
					List<Attribute> subAttributeList  = multiValuedAttribute.getAttributeValues();
					for (Attribute subAttribute : subAttributeList) {
						ComplexAttribute complexSubAttribute = (ComplexAttribute) subAttribute;
						Map<String, Attribute> subSubAttributes = complexSubAttribute.getSubAttributesList();
						/*String parent = null;
						if(subAttribute.getName().equals("address")) {
							if(LdapScimAttrMap.valueOf(subAttribute.getName()).isSet()){
								continue;
							}
							LdapScimAttrMap.valueOf(subAttribute.getName()).setSet(true);
							parent = subAttribute.getName();
						} else if (subAttribute.getName().equals(UserSchemaConstants.EMAILS) 
								|| subAttribute.getName().equals(UserSchemaConstants.PHONE_NUMBERS)) {
							for (Attribute subSubAttribute : subSubAttributes.values()) {
								if(subSubAttribute.getName().equals("type")){
									parent = subAttribute.getName()+"_"+subSubAttribute.getName();
								}
							}
							LdapScimAttrMap.valueOf(subAttribute.getName()).setSet(true);
						} else if (subAttribute.getName().equals(UserSchemaConstants.GROUPS)) {
							parent = subAttribute.getName();
							LdapScimAttrMap.valueOf(subAttribute.getName()).setSet(true);
						} else if(subAttribute.getURI().equals(UserSchemaConstants.X509CERTIFICATES_URI)) {
							parent = UserSchemaConstants.X509CERTIFICATES;
						} else if (subAttribute.getURI().equals(UserSchemaConstants.PHOTOS_URI)) {
							for (Attribute subSubAttribute : subSubAttributes.values()) {
								if(subSubAttribute.getName().equals("type")){
									SimpleAttribute simpleAttribute = (SimpleAttribute) subSubAttribute;
									parent = UserSchemaConstants.PHOTOS+"_"+simpleAttribute.getValue();
									break;
								}
							}
						}*/
						//If address, check for home address
						if(subAttribute.getURI().equals(UserSchemaConstants.ADDRESSES_URI)) {
							String value;
							boolean isHome = false;
							for (Attribute subSubAttribute : subSubAttributes.values()) {
								SimpleAttribute simpleAttribute = (SimpleAttribute) subSubAttribute;
								if(subSubAttribute.getName().equals("type")){
									//Check if type is "home"
									if(simpleAttribute.getValue().equals(UserSchemaConstants.HOME)) { 
										isHome = true;
									} else {
										break;
									}
								} else if (subSubAttribute.getName().equals("value")) {
									value = (String) simpleAttribute.getValue();
								}
							}
							if(isHome) {
								attributeSet.add(new LDAPAttribute(attr,simpleAttribute.getValue().toString()));	
							}
						}
						
						String parent = getAttributeName(subAttribute);
						for (Attribute subSubAttribute : subSubAttributes.values()) {
							if (subSubAttribute instanceof SimpleAttribute) {
								if(subSubAttribute.getName().equals("value")) {
									attributeSet = simpleAttributeToString(parent, attributeSet,
											(Attribute) ((SimpleAttribute) subSubAttribute));
								} /*if (UserSchemaConstants.ADDRESSES.equals(parent)) {
									parent=parent+"_"+
								}*/

							} else if (subSubAttribute instanceof MultiValuedAttribute) {
								attributeSet = multiValuedPrimitiveAttributeToString(
										((MultiValuedAttribute) subSubAttribute).getAttributePrimitiveValues(),
										subSubAttribute.getName(),attributeSet);
							}
						}
					}
				} else {
					List<Object> primitiveValueList = multiValuedAttribute.getAttributePrimitiveValues();
					attributeSet = multiValuedPrimitiveAttributeToString(primitiveValueList,
							multiValuedAttribute.getName(),attributeSet);
				}

			}
		}
		return attributeSet;
	}

	private static LDAPAttributeSet simpleAttributeToString (String parentName, LDAPAttributeSet attributeSet, Attribute attribute) {
		SimpleAttribute simpleAttribute = (SimpleAttribute) attribute;
		try{
			LdapScimAttrMap name;
			if(parentName!=null) {
				name = LdapScimAttrMap.valueOf(parentName);
			} else {
				name = LdapScimAttrMap.valueOf(simpleAttribute.getName());
			}

			if(name != null && attributeSet != null) {
				attributeSet.add(new LDAPAttribute(name.getValue(),simpleAttribute.getValue().toString()));
			}
		} catch (Exception e){
			System.out.println("Mapping for '"+simpleAttribute.getName()+"' missing!");
		}
		return attributeSet;
	}

	private static LDAPAttributeSet multiValuedPrimitiveAttributeToString(List<Object> attributePrimitiveValues, String attributeName,LDAPAttributeSet attributeSet) {
		try{
			LdapScimAttrMap name = LdapScimAttrMap.valueOf(attributeName);
			if(name != null && attributeSet != null) {
				for (Object item  : attributePrimitiveValues) {
					attributeSet.add(new LDAPAttribute(attributeName,(String) item));
				}
			}
		} catch (Exception e){
			System.out.println("Mapping for '"+attributeName+"' missing!");
		}
		return attributeSet;
	}

	private static String getAttributeName (Attribute subAttribute) throws BadRequestException {
		String parent = null;
		ComplexAttribute complexSubAttribute = (ComplexAttribute) subAttribute;
		Map<String, Attribute> subSubAttributes = complexSubAttribute.getSubAttributesList();
			switch (subAttribute.getURI()) {
			case UserSchemaConstants.EMAILS_URI:
			case UserSchemaConstants.PHONE_NUMBERS_URI:
			case UserSchemaConstants.GROUP_URI:
				parent = subAttribute.getName();
			case UserSchemaConstants.PHOTOS_URI:
				parent = parent== null?UserSchemaConstants.PHOTOS:parent;
				for (Attribute subSubAttribute : subSubAttributes.values()) {
					if(subSubAttribute.getName().equals("type")){
						SimpleAttribute simpleAttribute = (SimpleAttribute) subSubAttribute;
						parent = parent+"_"+simpleAttribute.getValue();
						break;
					}
				}
				break;
			case UserSchemaConstants.X509CERTIFICATES_URI:
				parent = UserSchemaConstants.X509CERTIFICATES;
				break;
			case UserSchemaConstants.ADDRESSES_URI:
				/*if(LdapScimAttrMap.valueOf(subAttribute.getName()).isSet()) {
					throw new BadRequestException(subAttribute.getName()+" is not Implemented", ResponseCodeConstants.TOO_MANY);
				}*/
				for (Attribute subSubAttribute : subSubAttributes.values()) {
					if(subSubAttribute.getName().equals("type")){
						SimpleAttribute simpleAttribute = (SimpleAttribute) subSubAttribute;
						if(simpleAttribute.getValue().equals(UserSchemaConstants.HOME)){
							parent =UserSchemaConstants.ADDRESSES+"_"+UserSchemaConstants.HOME;
						}
						break;
					}
				}
				
				//addresses_home
				LdapScimAttrMap.valueOf(subAttribute.getName()).setSet(true);
				//parent = subAttribute.getName();
				break;
			}
		return parent;
	}
}
